SkillX API Testing Documentation - COMPLETE VERSION
==================================================

## Testing Sequence & Complete Route Details

### 1. Health Check
- **Method:** GET
- **URL:** http://localhost:3000/api/health
- **Headers:** None
- **Body:** None
- **Expected:** Status 200, server health info

---

### 2. Register Admin (Create first admin)
- **Method:** POST
- **URL:** http://localhost:3000/api/auth/register-admin
- **Headers:** Content-Type: application/json
- **Body:**
```json
{
  "email": "admin@skillx.com",
  "password": "Admin123!",
  "firstName": "John",
  "lastName": "Doe",
  "phone": "1234567890"
}
```
- **Expected:** Status 201, user data + tokens

---

### 3. Admin Login (Get tokens)
- **Method:** POST
- **URL:** http://localhost:3000/api/auth/login
- **Headers:** Content-Type: application/json
- **Body:**
```json
{
  "email": "admin@skillx.com",
  "password": "Admin123!"
}
```
- **Expected:** Status 200, user data + tokens
- **⚠️ Save accessToken for authenticated endpoints**

---

### 4. User Details (Test authentication)
- **Method:** GET
- **URL:** http://localhost:3000/api/user/details
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, user profile

---

### 5. Token Refresh
- **Method:** POST
- **URL:** http://localhost:3000/api/user/token
- **Headers:** Content-Type: application/json
- **Body:**
```json
{
  "refreshToken": "{refreshToken_from_login}"
}
```
- **Expected:** Status 200, new tokens

---

### 6. Create Order
- **Method:** POST
- **URL:** http://localhost:3000/api/orders
- **Headers:** Authorization: Bearer {accessToken}, Content-Type: application/json
- **Body:**
```json
{
  "serviceType": "resume_writing",
  "urgencyLevel": "standard",
  "requirements": {
    "industryType": "Technology",
    "experienceLevel": "mid_level",
    "targetRole": "Software Engineer",
    "specialRequests": "Please focus on technical skills",
    "atsOptimization": true,
    "keywords": ["JavaScript", "React", "Node.js"]
  },
  "pricing": {
    "basePrice": 150,
    "urgencyFee": 0,
    "totalAmount": 150,
    "currency": "USD"
  }
}
```
- **Expected:** Status 201, order created

---

### 7. List Orders
- **Method:** GET
- **URL:** http://localhost:3000/api/orders?page=1&limit=10
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, orders list

---

### 8. Order Details
- **Method:** GET
- **URL:** http://localhost:3000/api/orders/{orderId}
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, order details

---

### 9. Analytics (Admin only)
- **Method:** GET
- **URL:** http://localhost:3000/api/analytics
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, analytics data

---

### 10. Chat Messages (Get)
- **Method:** GET
- **URL:** http://localhost:3000/api/chat?orderId={orderId}&page=1&limit=20
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, chat messages

---

### 11. Send Chat Message
- **Method:** POST
- **URL:** http://localhost:3000/api/chat
- **Headers:** Authorization: Bearer {accessToken}, Content-Type: application/json
- **Body:**
```json
{
  "orderId": "{orderId}",
  "message": "Hello, I have a question about my order."
}
```
- **Expected:** Status 201, message sent

---

### 12. Files (Get)
- **Method:** GET
- **URL:** http://localhost:3000/api/files?orderId={orderId}&page=1&limit=10
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, files list

---

### 13. Upload File (Simulated)
- **Method:** POST
- **URL:** http://localhost:3000/api/files
- **Headers:** Authorization: Bearer {accessToken}, Content-Type: application/json
- **Body:**
```json
{
  "filename": "resume_v1.pdf",
  "originalName": "My Resume.pdf",
  "mimeType": "application/pdf",
  "size": 1024000,
  "orderId": "{orderId}",
  "isPublic": false
}
```
- **Expected:** Status 201, file uploaded

---

### 14. Payments (Get)
- **Method:** GET
- **URL:** http://localhost:3000/api/payments?page=1&limit=10
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, payments list

---

### 15. Create Payment
- **Method:** POST
- **URL:** http://localhost:3000/api/payments
- **Headers:** Authorization: Bearer {accessToken}, Content-Type: application/json
- **Body:**
```json
{
  "orderId": "{orderId}",
  "paymentMethod": "credit_card",
  "amount": 150
}
```
- **Expected:** Status 201, payment initiated

---

### 16. Revisions (Get)
- **Method:** GET
- **URL:** http://localhost:3000/api/revisions?page=1&limit=10
- **Headers:** Authorization: Bearer {accessToken}
- **Body:** None
- **Expected:** Status 200, revisions list

---

### 17. Request Revision
- **Method:** POST
- **URL:** http://localhost:3000/api/revisions
- **Headers:** Authorization: Bearer {accessToken}, Content-Type: application/json
- **Body:**
```json
{
  "orderId": "{orderId}",
  "description": "Please add more technical skills and update the formatting",
  "priority": "medium"
}
```
- **Expected:** Status 201, revision requested

---

### 18. Debug Users (Development only)
- **Method:** GET
- **URL:** http://localhost:3000/api/debug/users
- **Headers:** None
- **Body:** None
- **Expected:** Status 200, user count and info

---

## Quick Reference:
- Replace {accessToken} with token from login response
- Replace {refreshToken} with refresh token from login response  
- Replace {orderId} with actual order ID from create/list orders
- All authenticated endpoints require "Authorization: Bearer {accessToken}" header
- All POST requests require "Content-Type: application/json" header

## Testing Flow:
1. Start with Health Check
2. Register Admin (once)
3. Login to get tokens
4. Test all authenticated endpoints
5. Create orders, payments, revisions to test full workflow

Generated on: 2025-09-08
Total Endpoints: 18 (All Implemented!)
